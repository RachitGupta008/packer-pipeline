name: packer

on:
  workflow_call:
    inputs:
        build-path:
          required: true
          type: string

jobs:
  packer:
    runs-on: ubuntu-latest
    name: Run Packer
    steps:

         
       
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest" # or `latest`
          
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Use gcloud CLI'
        run: |
              gcloud version
              gcloud components update --quiet
              gcloud auth list
              gcloud version
      
      - name: Configure Packer
        run: |
              ls -altr
              echo "PACKER_LOG=1" >> $GITHUB_ENV
              echo "PACKER_LOG_PATH=packer-output.txt" >> $GITHUB_ENV
              ls /home/runner/work/packer-pipeline/ -altr
      - name: Packer fmt
        run: |
              cd ${{ inputs.build-path }}
              packer fmt -recursive .

      - name: Run `packer init`
        id: init
        run: |
              ls -altr
              cd ${{ inputs.build-path }}
              packer init ./image.pkr.hcl
        
      - name: BUILD
        id: build
        run: |
              ls -altr
              cd ${{ inputs.build-path }}
              ls -altr
              packer build -debug -timestamp-ui ./image.pkr.hcl
               
        
      - name: List Summanry
        run: |
              cd ${{ inputs.build-path }}
              ls -altr
              
              IMG_NAME=$(cat packer-output.txt | sed -n -e "s/^.* A disk image was created: //p")
              echo $IMG_NAME
              echo "Image Created $IMG_NAME" >> $GITHUB_STEP_SUMMARY
      - name: Cleanup
        if: cancelled() # Check if the job has been cancelled
        run: |
              cd ${{ inputs.build-path }}
              ls -altr
              ps aux | grep packer
              cat packer-output.txt
              echo "sleeping.........."
              sleep 3m
              cat packer-output.txt
              ps aux | grep packer
              #VM_NAME=$(cat packer-output.txt | sed -n 's/.*Instance: \([^ ]*\).*/\1/p')
              #ZONE=$(cat packer-output.txt | sed 's/.*started in \([^ ]*\).[0m*/\1/')
              #echo $VM_NAME
              #echo $ZONE
              #gcloud compute instances describe $VM_NAME --zone=$ZONE 
              #gcloud compute disks delete $VM_NAME --quiet
              
              
      - name: Step 3 - Use the Upload Artifact GitHub Action
        uses: actions/upload-artifact@v2
        
        if: cancelled()
        with: 
          name: logs
          path: ${{ inputs.build-path }}/packer-output.txt
